from PIL import Image, ImageDraw, ImageFont
import os
from datetime import datetime
from typing import List
from app.models.country import Country

def generate_summary_image(total_countries: int, top_countries: List[Country], timestamp: datetime):
    """Generate summary image with country statistics"""
    
    # Create image
    width, height = 800, 600
    img = Image.new('RGB', (width, height), color='#4f46e5')
    draw = ImageDraw.Draw(img)
    
    # Try to use a better font, fall back to default if not available
    try:
        title_font = ImageFont.truetype("arial.ttf", 40)
        heading_font = ImageFont.truetype("arial.ttf", 28)
        text_font = ImageFont.truetype("arial.ttf", 20)
    except:
        title_font = ImageFont.load_default()
        heading_font = ImageFont.load_default()
        text_font = ImageFont.load_default()
    
    # Draw title
    title = "Country Currency Summary"
    draw.text((50, 40), title, fill='white', font=title_font)
    
    # Draw total countries
    draw.text((50, 120), f"Total Countries: {total_countries}", fill='#fbbf24', font=heading_font)
    
    # Draw timestamp
    timestamp_str = timestamp.strftime("%Y-%m-%d %H:%M:%S UTC")
    draw.text((50, 170), f"Last Updated: {timestamp_str}", fill='white', font=text_font)
    
    # Draw line separator
    draw.line([(50, 220), (750, 220)], fill='white', width=2)
    
    # Draw top 5 countries
    draw.text((50, 240), "Top 5 Countries by Estimated GDP", fill='#fbbf24', font=heading_font)
    
    y_offset = 290
    for i, country in enumerate(top_countries, 1):
        gdp_formatted = f"${country.estimated_gdp:,.2f}" if country.estimated_gdp else "N/A"
        text = f"{i}. {country.name}: {gdp_formatted}"
        draw.text((70, y_offset), text, fill='white', font=text_font)
        y_offset += 40
    
    # Draw footer
    footer_text = "Generated by Country Currency API"
    draw.text((50, height - 60), footer_text, fill='white', font=text_font)
    
    # Ensure cache directory exists
    cache_dir = os.getenv("CACHE_DIR", "cache")
    os.makedirs(cache_dir, exist_ok=True)
    
    # Save image
    image_path = os.getenv("IMAGE_PATH", "cache/summary.png")
    img.save(image_path)
    
    return image_path